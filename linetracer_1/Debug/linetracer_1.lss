
linetracer_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000008a6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800122  00800122  0000095c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6a  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ee  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b9  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000048f  00000000  00000000  00002a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	d6 c0       	rjmp	.+428    	; 0x1ee <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 35       	cpi	r26, 0x5A	; 90
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3c d0       	rcall	.+120    	; 0x13c <main>
  c4:	ee c3       	rjmp	.+2012   	; 0x8a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
	Uart_Trans(data+48);
	data=(numdata%100)/10;
	Uart_Trans(data+48);
	data=numdata%10;
	Uart_Trans(data+48);
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <mode+0x1>
  d6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <mode>
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <mode+0x1>
  fa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <mode>
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <Get_ADC>:
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	87 b9       	out	0x07, r24	; 7
 110:	86 b1       	in	r24, 0x06	; 6
 112:	80 64       	ori	r24, 0x40	; 64
 114:	86 b9       	out	0x06, r24	; 6
 116:	34 9b       	sbis	0x06, 4	; 6
 118:	fe cf       	rjmp	.-4      	; 0x116 <Get_ADC+0xa>
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	95 b1       	in	r25, 0x05	; 5
 11e:	08 95       	ret

00000120 <Uart_Init>:
 120:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 124:	88 e1       	ldi	r24, 0x18	; 24
 126:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 130:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13a:	08 95       	ret

0000013c <main>:
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	ca bb       	out	0x1a, r28	; 26
 140:	cb bb       	out	0x1b, r28	; 27
 142:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	81 bb       	out	0x11, r24	; 17
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	87 b9       	out	0x07, r24	; 7
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	86 b9       	out	0x06, r24	; 6
 152:	e6 df       	rcall	.-52     	; 0x120 <Uart_Init>
 154:	c7 bb       	out	0x17, r28	; 23
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	82 b9       	out	0x02, r24	; 2
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	83 b9       	out	0x03, r24	; 3
 15e:	92 ea       	ldi	r25, 0xA2	; 162
 160:	9f bd       	out	0x2f, r25	; 47
 162:	99 e1       	ldi	r25, 0x19	; 25
 164:	9e bd       	out	0x2e, r25	; 46
 166:	2f e1       	ldi	r18, 0x1F	; 31
 168:	33 e0       	ldi	r19, 0x03	; 3
 16a:	37 bd       	out	0x27, r19	; 39
 16c:	26 bd       	out	0x26, r18	; 38
 16e:	1b bc       	out	0x2b, r1	; 43
 170:	1a bc       	out	0x2a, r1	; 42
 172:	19 bc       	out	0x29, r1	; 41
 174:	18 bc       	out	0x28, r1	; 40
 176:	97 e0       	ldi	r25, 0x07	; 7
 178:	93 bf       	out	0x33, r25	; 51
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	97 bf       	out	0x37, r25	; 55
 17e:	93 e6       	ldi	r25, 0x63	; 99
 180:	92 bf       	out	0x32, r25	; 50
 182:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	89 bf       	out	0x39, r24	; 57
 18a:	78 94       	sei
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x50>

0000018e <Normal_AD>:

int Normal_AD(int AD, int AD_Max, int AD_min)
{
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	eb 01       	movw	r28, r22
 1a0:	8a 01       	movw	r16, r20
	double res;
	res = ((double)(AD-AD_min)/(AD_Max-AD_min))*100;
 1a2:	84 1b       	sub	r24, r20
 1a4:	95 0b       	sbc	r25, r21
 1a6:	bc 01       	movw	r22, r24
 1a8:	99 0f       	add	r25, r25
 1aa:	88 0b       	sbc	r24, r24
 1ac:	99 0b       	sbc	r25, r25
 1ae:	8a d2       	rcall	.+1300   	; 0x6c4 <__floatsisf>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
 1b4:	be 01       	movw	r22, r28
 1b6:	60 1b       	sub	r22, r16
 1b8:	71 0b       	sbc	r23, r17
 1ba:	07 2e       	mov	r0, r23
 1bc:	00 0c       	add	r0, r0
 1be:	88 0b       	sbc	r24, r24
 1c0:	99 0b       	sbc	r25, r25
 1c2:	80 d2       	rcall	.+1280   	; 0x6c4 <__floatsisf>
 1c4:	9b 01       	movw	r18, r22
 1c6:	ac 01       	movw	r20, r24
 1c8:	c7 01       	movw	r24, r14
 1ca:	b6 01       	movw	r22, r12
 1cc:	e0 d1       	rcall	.+960    	; 0x58e <__divsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	48 ec       	ldi	r20, 0xC8	; 200
 1d4:	52 e4       	ldi	r21, 0x42	; 66
 1d6:	02 d3       	rcall	.+1540   	; 0x7dc <__mulsf3>
	res = (int)res;
 1d8:	42 d2       	rcall	.+1156   	; 0x65e <__fixsfsi>
 1da:	cb 01       	movw	r24, r22
	return res;
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	08 95       	ret

000001ee <__vector_16>:
 1ee:	1f 92       	push	r1

ISR(INT1_vect) {
	mode = 1;
} //MODE1 = RIDE

ISR(TIMER0_OVF_vect) {
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	0b b6       	in	r0, 0x3b	; 59
 1fa:	0f 92       	push	r0
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	cnt++; //제어주기마다 cnt 증가
 21c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cnt>
 220:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cnt+0x1>
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cnt+0x1>
 22a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cnt>
	TCNT0 = 99; //10ms 제어주기
 22e:	83 e6       	ldi	r24, 0x63	; 99
 230:	82 bf       	out	0x32, r24	; 50
	
	for(int i=0; i<8; i++){
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	0a c0       	rjmp	.+20     	; 0x24c <__vector_16+0x5e>
		AD[i] = Get_ADC(i);
 238:	8c 2f       	mov	r24, r28
 23a:	68 df       	rcall	.-304    	; 0x10c <Get_ADC>
 23c:	fe 01       	movw	r30, r28
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e8 5c       	subi	r30, 0xC8	; 200
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	91 83       	std	Z+1, r25	; 0x01
 248:	80 83       	st	Z, r24

ISR(TIMER0_OVF_vect) {
	cnt++; //제어주기마다 cnt 증가
	TCNT0 = 99; //10ms 제어주기
	
	for(int i=0; i<8; i++){
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	c8 30       	cpi	r28, 0x08	; 8
 24e:	d1 05       	cpc	r29, r1
 250:	9c f3       	brlt	.-26     	; 0x238 <__vector_16+0x4a>
		AD[i] = Get_ADC(i);
	} //ADC값 받기
	
	if(mode == 0){
 252:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode>
 256:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <mode+0x1>
 25a:	89 2b       	or	r24, r25
 25c:	09 f1       	breq	.+66     	; 0x2a0 <__vector_16+0xb2>
 25e:	4a c0       	rjmp	.+148    	; 0x2f4 <__vector_16+0x106>
		for(int i=0; i<8; i++){
			if(AD[i] > AD_Max[i])
 260:	c9 01       	movw	r24, r18
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	fc 01       	movw	r30, r24
 268:	e8 5c       	subi	r30, 0xC8	; 200
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	40 81       	ld	r20, Z
 26e:	51 81       	ldd	r21, Z+1	; 0x01
 270:	fc 01       	movw	r30, r24
 272:	e8 5d       	subi	r30, 0xD8	; 216
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	80 81       	ld	r24, Z
 278:	91 81       	ldd	r25, Z+1	; 0x01
 27a:	84 17       	cp	r24, r20
 27c:	95 07       	cpc	r25, r21
 27e:	6c f4       	brge	.+26     	; 0x29a <__vector_16+0xac>
			AD_Max[i] = AD[i];
 280:	c9 01       	movw	r24, r18
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	fc 01       	movw	r30, r24
 288:	e8 5c       	subi	r30, 0xC8	; 200
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	40 81       	ld	r20, Z
 28e:	51 81       	ldd	r21, Z+1	; 0x01
 290:	fc 01       	movw	r30, r24
 292:	e8 5d       	subi	r30, 0xD8	; 216
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	51 83       	std	Z+1, r21	; 0x01
 298:	40 83       	st	Z, r20
	for(int i=0; i<8; i++){
		AD[i] = Get_ADC(i);
	} //ADC값 받기
	
	if(mode == 0){
		for(int i=0; i<8; i++){
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_16+0xb6>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	28 30       	cpi	r18, 0x08	; 8
 2a6:	31 05       	cpc	r19, r1
 2a8:	dc f2       	brlt	.-74     	; 0x260 <__vector_16+0x72>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	1f c0       	rjmp	.+62     	; 0x2ee <__vector_16+0x100>
			if(AD[i] > AD_Max[i])
			AD_Max[i] = AD[i];
		}
		
		for(int i=0; i<8; i++){
			if(AD[i] < AD_Min[i])
 2b0:	c9 01       	movw	r24, r18
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	fc 01       	movw	r30, r24
 2b8:	e8 5c       	subi	r30, 0xC8	; 200
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	40 81       	ld	r20, Z
 2be:	51 81       	ldd	r21, Z+1	; 0x01
 2c0:	fc 01       	movw	r30, r24
 2c2:	e0 5f       	subi	r30, 0xF0	; 240
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	91 81       	ldd	r25, Z+1	; 0x01
 2ca:	48 17       	cp	r20, r24
 2cc:	59 07       	cpc	r21, r25
 2ce:	6c f4       	brge	.+26     	; 0x2ea <__vector_16+0xfc>
			AD_Min[i] = AD[i];
 2d0:	c9 01       	movw	r24, r18
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	fc 01       	movw	r30, r24
 2d8:	e8 5c       	subi	r30, 0xC8	; 200
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	40 81       	ld	r20, Z
 2de:	51 81       	ldd	r21, Z+1	; 0x01
 2e0:	fc 01       	movw	r30, r24
 2e2:	e0 5f       	subi	r30, 0xF0	; 240
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	51 83       	std	Z+1, r21	; 0x01
 2e8:	40 83       	st	Z, r20
		for(int i=0; i<8; i++){
			if(AD[i] > AD_Max[i])
			AD_Max[i] = AD[i];
		}
		
		for(int i=0; i<8; i++){
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	28 30       	cpi	r18, 0x08	; 8
 2f0:	31 05       	cpc	r19, r1
 2f2:	f4 f2       	brlt	.-68     	; 0x2b0 <__vector_16+0xc2>
			if(AD[i] < AD_Min[i])
			AD_Min[i] = AD[i];
		}
	} //최대 최소 받아오기
	
	if(mode == 1){
 2f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode>
 2f8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <mode+0x1>
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	09 f0       	breq	.+2      	; 0x302 <__vector_16+0x114>
 300:	2b c1       	rjmp	.+598    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		line = 0;
 302:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <line+0x1>
 306:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <line>
		for(int i=0; i<8; i++){
 30a:	00 e0       	ldi	r16, 0x00	; 0
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	17 c0       	rjmp	.+46     	; 0x33e <__vector_16+0x150>
			AD[i] = Normal_AD(AD[i], AD_Max[i], AD_Min[i]);
 310:	c8 01       	movw	r24, r16
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	fc 01       	movw	r30, r24
 318:	e0 5f       	subi	r30, 0xF0	; 240
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	40 81       	ld	r20, Z
 31e:	51 81       	ldd	r21, Z+1	; 0x01
 320:	fc 01       	movw	r30, r24
 322:	e8 5d       	subi	r30, 0xD8	; 216
 324:	fe 4f       	sbci	r31, 0xFE	; 254
 326:	60 81       	ld	r22, Z
 328:	71 81       	ldd	r23, Z+1	; 0x01
 32a:	ec 01       	movw	r28, r24
 32c:	c8 5c       	subi	r28, 0xC8	; 200
 32e:	de 4f       	sbci	r29, 0xFE	; 254
 330:	88 81       	ld	r24, Y
 332:	99 81       	ldd	r25, Y+1	; 0x01
 334:	2c df       	rcall	.-424    	; 0x18e <Normal_AD>
 336:	99 83       	std	Y+1, r25	; 0x01
 338:	88 83       	st	Y, r24
		}
	} //최대 최소 받아오기
	
	if(mode == 1){
		line = 0;
		for(int i=0; i<8; i++){
 33a:	0f 5f       	subi	r16, 0xFF	; 255
 33c:	1f 4f       	sbci	r17, 0xFF	; 255
 33e:	08 30       	cpi	r16, 0x08	; 8
 340:	11 05       	cpc	r17, r1
 342:	34 f3       	brlt	.-52     	; 0x310 <__vector_16+0x122>
			AD[i] = Normal_AD(AD[i], AD_Max[i], AD_Min[i]);
		} //정규화
		
		if (reverse==1)
 344:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 348:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	01 f1       	breq	.+64     	; 0x390 <__vector_16+0x1a2>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	60 c0       	rjmp	.+192    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			for (int i=0; i<8; i++)
			{
				if (AD_BW[i]==1) AD_BW[i]=0;
 356:	fc 01       	movw	r30, r24
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	e6 5b       	subi	r30, 0xB6	; 182
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	20 81       	ld	r18, Z
 362:	31 81       	ldd	r19, Z+1	; 0x01
 364:	21 30       	cpi	r18, 0x01	; 1
 366:	31 05       	cpc	r19, r1
 368:	41 f4       	brne	.+16     	; 0x37a <__vector_16+0x18c>
 36a:	fc 01       	movw	r30, r24
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e6 5b       	subi	r30, 0xB6	; 182
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	11 82       	std	Z+1, r1	; 0x01
 376:	10 82       	st	Z, r1
 378:	09 c0       	rjmp	.+18     	; 0x38c <__vector_16+0x19e>
				else AD_BW[i]=1;
 37a:	fc 01       	movw	r30, r24
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e6 5b       	subi	r30, 0xB6	; 182
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	31 83       	std	Z+1, r19	; 0x01
 38a:	20 83       	st	Z, r18
			AD[i] = Normal_AD(AD[i], AD_Max[i], AD_Min[i]);
		} //정규화
		
		if (reverse==1)
		{
			for (int i=0; i<8; i++)
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_16+0x1a6>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	91 05       	cpc	r25, r1
 398:	f4 f2       	brlt	.-68     	; 0x356 <__vector_16+0x168>
 39a:	7f c0       	rjmp	.+254    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			} //검은 배경에 하얀 선
		}
		else
		{
			for(int i=0; i<8; i++){
				if(AD[i] < 55) {PORTA&=~(1<<i); AD_BW[i]=1; line++;} //검정 1
 39c:	fc 01       	movw	r30, r24
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	e8 5c       	subi	r30, 0xC8	; 200
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	20 81       	ld	r18, Z
 3a8:	31 81       	ldd	r19, Z+1	; 0x01
 3aa:	27 33       	cpi	r18, 0x37	; 55
 3ac:	31 05       	cpc	r19, r1
 3ae:	04 f5       	brge	.+64     	; 0x3f0 <__vector_16+0x202>
 3b0:	3b b3       	in	r19, 0x1b	; 27
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	ab 01       	movw	r20, r22
 3b8:	08 2e       	mov	r0, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <__vector_16+0x1d2>
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <__vector_16+0x1ce>
 3c4:	24 2f       	mov	r18, r20
 3c6:	20 95       	com	r18
 3c8:	23 23       	and	r18, r19
 3ca:	2b bb       	out	0x1b, r18	; 27
 3cc:	fc 01       	movw	r30, r24
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	e6 5b       	subi	r30, 0xB6	; 182
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	71 83       	std	Z+1, r23	; 0x01
 3d8:	60 83       	st	Z, r22
 3da:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <line>
 3de:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <line+0x1>
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <line+0x1>
 3ea:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <line>
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				else {PORTA|=(1<<i); AD_BW[i] = 0;} //하양 0
 3f0:	4b b3       	in	r20, 0x1b	; 27
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	08 2e       	mov	r0, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <__vector_16+0x210>
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <__vector_16+0x20c>
 402:	24 2b       	or	r18, r20
 404:	2b bb       	out	0x1b, r18	; 27
 406:	fc 01       	movw	r30, r24
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	e6 5b       	subi	r30, 0xB6	; 182
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	11 82       	std	Z+1, r1	; 0x01
 412:	10 82       	st	Z, r1
				else AD_BW[i]=1;
			} //검은 배경에 하얀 선
		}
		else
		{
			for(int i=0; i<8; i++){
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	88 30       	cpi	r24, 0x08	; 8
 418:	91 05       	cpc	r25, r1
 41a:	0c f4       	brge	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	bf cf       	rjmp	.-130    	; 0x39c <__vector_16+0x1ae>
				if(AD[i] < 55) {PORTA&=~(1<<i); AD_BW[i]=1; line++;} //검정 1
				else {PORTA|=(1<<i); AD_BW[i] = 0;} //하양 0
			} //흰 배경에 검은 선
			
			if(AD_BW[0]==1 && AD_BW[7]==1 && (AD_BW[2]==0||AD_BW[3]==0||AD_BW[4]==0||AD_BW[5]==0)) 
 41e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <AD_BW>
 422:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <AD_BW+0x1>
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	41 f5       	brne	.+80     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 42a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <AD_BW+0xe>
 42e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <AD_BW+0xf>
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	11 f5       	brne	.+68     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 436:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <AD_BW+0x4>
 43a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <AD_BW+0x5>
 43e:	89 2b       	or	r24, r25
 440:	91 f0       	breq	.+36     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 442:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <AD_BW+0x6>
 446:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <AD_BW+0x7>
 44a:	89 2b       	or	r24, r25
 44c:	61 f0       	breq	.+24     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 44e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <AD_BW+0x8>
 452:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <AD_BW+0x9>
 456:	89 2b       	or	r24, r25
 458:	31 f0       	breq	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <AD_BW+0xa>
 45e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <AD_BW+0xb>
 462:	89 2b       	or	r24, r25
 464:	51 f4       	brne	.+20     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				cnt++;
 466:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cnt>
 46a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cnt+0x1>
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cnt+0x1>
 474:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cnt>
 478:	04 c0       	rjmp	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			else cnt = 0;
 47a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cnt+0x1>
 47e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cnt>

			if(cnt >= 50) reverse = 1;
 482:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cnt>
 486:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cnt+0x1>
 48a:	c2 97       	sbiw	r24, 0x32	; 50
 48c:	34 f0       	brlt	.+12     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 496:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		}
		
		int Weight=0; //가중치
		for(int i=0; i<8; i++){
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
			else cnt = 0;

			if(cnt >= 50) reverse = 1;
		}
		
		int Weight=0; //가중치
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	50 e0       	ldi	r21, 0x00	; 0
		for(int i=0; i<8; i++){
 4a2:	24 c0       	rjmp	.+72     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
			Weight += AD_Weight[i]*AD_BW[i]*10;
 4a4:	c9 01       	movw	r24, r18
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	fc 01       	movw	r30, r24
 4ac:	e0 50       	subi	r30, 0x00	; 0
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	01 90       	ld	r0, Z+
 4b2:	f0 81       	ld	r31, Z
 4b4:	e0 2d       	mov	r30, r0
 4b6:	dc 01       	movw	r26, r24
 4b8:	a6 5b       	subi	r26, 0xB6	; 182
 4ba:	be 4f       	sbci	r27, 0xFE	; 254
 4bc:	6d 91       	ld	r22, X+
 4be:	7c 91       	ld	r23, X
 4c0:	e6 9f       	mul	r30, r22
 4c2:	c0 01       	movw	r24, r0
 4c4:	e7 9f       	mul	r30, r23
 4c6:	90 0d       	add	r25, r0
 4c8:	f6 9f       	mul	r31, r22
 4ca:	90 0d       	add	r25, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	bc 01       	movw	r22, r24
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	86 0f       	add	r24, r22
 4e2:	97 1f       	adc	r25, r23
 4e4:	48 0f       	add	r20, r24
 4e6:	59 1f       	adc	r21, r25

			if(cnt >= 50) reverse = 1;
		}
		
		int Weight=0; //가중치
		for(int i=0; i<8; i++){
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	28 30       	cpi	r18, 0x08	; 8
 4ee:	31 05       	cpc	r19, r1
 4f0:	cc f2       	brlt	.-78     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			Weight += AD_Weight[i]*AD_BW[i]*10;
		}
		
		if(line>0){
 4f2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <line>
 4f6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <line+0x1>
 4fa:	18 16       	cp	r1, r24
 4fc:	19 06       	cpc	r1, r25
 4fe:	8c f4       	brge	.+34     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			PORTE = 0b00001010;
 500:	8a e0       	ldi	r24, 0x0A	; 10
 502:	83 b9       	out	0x03, r24	; 3
			post = Weight;
 504:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <post+0x1>
 508:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <post>
			OCR1A = 590 - Weight;
 50c:	8e e4       	ldi	r24, 0x4E	; 78
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	84 1b       	sub	r24, r20
 512:	95 0b       	sbc	r25, r21
 514:	9b bd       	out	0x2b, r25	; 43
 516:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 590 + Weight;
 518:	42 5b       	subi	r20, 0xB2	; 178
 51a:	5d 4f       	sbci	r21, 0xFD	; 253
 51c:	59 bd       	out	0x29, r21	; 41
 51e:	48 bd       	out	0x28, r20	; 40
 520:	1b c0       	rjmp	.+54     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		}
		else if(post<0){
 522:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <post>
 526:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <post+0x1>
 52a:	99 23       	and	r25, r25
 52c:	5c f4       	brge	.+22     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			PORTE = 0b00000110;
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	83 b9       	out	0x03, r24	; 3
			//OCR1A = 590 - post;
			OCR1A = 500;
 532:	84 ef       	ldi	r24, 0xF4	; 244
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	9b bd       	out	0x2b, r25	; 43
 538:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 600;
 53a:	88 e5       	ldi	r24, 0x58	; 88
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	99 bd       	out	0x29, r25	; 41
 540:	88 bd       	out	0x28, r24	; 40
 542:	0a c0       	rjmp	.+20     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		}
		else{
			PORTE = 0b00001001;
 544:	89 e0       	ldi	r24, 0x09	; 9
 546:	83 b9       	out	0x03, r24	; 3
			OCR1A = 600;
 548:	88 e5       	ldi	r24, 0x58	; 88
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	9b bd       	out	0x2b, r25	; 43
 54e:	8a bd       	out	0x2a, r24	; 42
			//OCR1B = 590 + post;
			OCR1B = 500;
 550:	84 ef       	ldi	r24, 0xF4	; 244
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	99 bd       	out	0x29, r25	; 41
 556:	88 bd       	out	0x28, r24	; 40
		}
		//오버플로우 방지
	} //정규화, 주행
	cnt = 0;
 558:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cnt+0x1>
 55c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cnt>
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	0f 90       	pop	r0
 582:	0b be       	out	0x3b, r0	; 59
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__divsf3>:
 58e:	0c d0       	rcall	.+24     	; 0x5a8 <__divsf3x>
 590:	eb c0       	rjmp	.+470    	; 0x768 <__fp_round>
 592:	e3 d0       	rcall	.+454    	; 0x75a <__fp_pscB>
 594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0x18>
 596:	da d0       	rcall	.+436    	; 0x74c <__fp_pscA>
 598:	30 f0       	brcs	.+12     	; 0x5a6 <__divsf3+0x18>
 59a:	21 f4       	brne	.+8      	; 0x5a4 <__divsf3+0x16>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	19 f0       	breq	.+6      	; 0x5a6 <__divsf3+0x18>
 5a0:	cc c0       	rjmp	.+408    	; 0x73a <__fp_inf>
 5a2:	51 11       	cpse	r21, r1
 5a4:	15 c1       	rjmp	.+554    	; 0x7d0 <__fp_szero>
 5a6:	cf c0       	rjmp	.+414    	; 0x746 <__fp_nan>

000005a8 <__divsf3x>:
 5a8:	f0 d0       	rcall	.+480    	; 0x78a <__fp_split3>
 5aa:	98 f3       	brcs	.-26     	; 0x592 <__divsf3+0x4>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	c9 f3       	breq	.-14     	; 0x5a2 <__divsf3+0x14>
 5b0:	55 23       	and	r21, r21
 5b2:	b1 f3       	breq	.-20     	; 0x5a0 <__divsf3+0x12>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	33 d0       	rcall	.+102    	; 0x63a <__divsf3_pse+0x8e>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	30 d0       	rcall	.+96     	; 0x63c <__divsf3_pse+0x90>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	29 d0       	rcall	.+82     	; 0x63a <__divsf3_pse+0x8e>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	27 d0       	rcall	.+78     	; 0x63a <__divsf3_pse+0x8e>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	2a f0       	brmi	.+10     	; 0x618 <__divsf3_pse+0x6c>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	68 f0       	brcs	.+26     	; 0x62e <__divsf3_pse+0x82>
 614:	92 c0       	rjmp	.+292    	; 0x73a <__fp_inf>
 616:	dc c0       	rjmp	.+440    	; 0x7d0 <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	ec f3       	brlt	.-6      	; 0x616 <__divsf3_pse+0x6a>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	dc f3       	brlt	.-10     	; 0x616 <__divsf3_pse+0x6a>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c9 f7       	brne	.-14     	; 0x620 <__divsf3_pse+0x74>
 62e:	88 0f       	add	r24, r24
 630:	91 1d       	adc	r25, r1
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret
 63a:	e1 e0       	ldi	r30, 0x01	; 1
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	bb 1f       	adc	r27, r27
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	ba 07       	cpc	r27, r26
 64c:	20 f0       	brcs	.+8      	; 0x656 <__divsf3_pse+0xaa>
 64e:	62 1b       	sub	r22, r18
 650:	73 0b       	sbc	r23, r19
 652:	84 0b       	sbc	r24, r20
 654:	ba 0b       	sbc	r27, r26
 656:	ee 1f       	adc	r30, r30
 658:	88 f7       	brcc	.-30     	; 0x63c <__divsf3_pse+0x90>
 65a:	e0 95       	com	r30
 65c:	08 95       	ret

0000065e <__fixsfsi>:
 65e:	04 d0       	rcall	.+8      	; 0x668 <__fixunssfsi>
 660:	68 94       	set
 662:	b1 11       	cpse	r27, r1
 664:	b5 c0       	rjmp	.+362    	; 0x7d0 <__fp_szero>
 666:	08 95       	ret

00000668 <__fixunssfsi>:
 668:	98 d0       	rcall	.+304    	; 0x79a <__fp_splitA>
 66a:	88 f0       	brcs	.+34     	; 0x68e <__fixunssfsi+0x26>
 66c:	9f 57       	subi	r25, 0x7F	; 127
 66e:	90 f0       	brcs	.+36     	; 0x694 <__fixunssfsi+0x2c>
 670:	b9 2f       	mov	r27, r25
 672:	99 27       	eor	r25, r25
 674:	b7 51       	subi	r27, 0x17	; 23
 676:	a0 f0       	brcs	.+40     	; 0x6a0 <__fixunssfsi+0x38>
 678:	d1 f0       	breq	.+52     	; 0x6ae <__fixunssfsi+0x46>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	1a f0       	brmi	.+6      	; 0x68a <__fixunssfsi+0x22>
 684:	ba 95       	dec	r27
 686:	c9 f7       	brne	.-14     	; 0x67a <__fixunssfsi+0x12>
 688:	12 c0       	rjmp	.+36     	; 0x6ae <__fixunssfsi+0x46>
 68a:	b1 30       	cpi	r27, 0x01	; 1
 68c:	81 f0       	breq	.+32     	; 0x6ae <__fixunssfsi+0x46>
 68e:	9f d0       	rcall	.+318    	; 0x7ce <__fp_zero>
 690:	b1 e0       	ldi	r27, 0x01	; 1
 692:	08 95       	ret
 694:	9c c0       	rjmp	.+312    	; 0x7ce <__fp_zero>
 696:	67 2f       	mov	r22, r23
 698:	78 2f       	mov	r23, r24
 69a:	88 27       	eor	r24, r24
 69c:	b8 5f       	subi	r27, 0xF8	; 248
 69e:	39 f0       	breq	.+14     	; 0x6ae <__fixunssfsi+0x46>
 6a0:	b9 3f       	cpi	r27, 0xF9	; 249
 6a2:	cc f3       	brlt	.-14     	; 0x696 <__fixunssfsi+0x2e>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b3 95       	inc	r27
 6ac:	d9 f7       	brne	.-10     	; 0x6a4 <__fixunssfsi+0x3c>
 6ae:	3e f4       	brtc	.+14     	; 0x6be <__fixunssfsi+0x56>
 6b0:	90 95       	com	r25
 6b2:	80 95       	com	r24
 6b4:	70 95       	com	r23
 6b6:	61 95       	neg	r22
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__floatunsisf>:
 6c0:	e8 94       	clt
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <__floatsisf+0x12>

000006c4 <__floatsisf>:
 6c4:	97 fb       	bst	r25, 7
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__floatsisf+0x12>
 6c8:	90 95       	com	r25
 6ca:	80 95       	com	r24
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	8f 4f       	sbci	r24, 0xFF	; 255
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	99 23       	and	r25, r25
 6d8:	a9 f0       	breq	.+42     	; 0x704 <__floatsisf+0x40>
 6da:	f9 2f       	mov	r31, r25
 6dc:	96 e9       	ldi	r25, 0x96	; 150
 6de:	bb 27       	eor	r27, r27
 6e0:	93 95       	inc	r25
 6e2:	f6 95       	lsr	r31
 6e4:	87 95       	ror	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f1 11       	cpse	r31, r1
 6ee:	f8 cf       	rjmp	.-16     	; 0x6e0 <__floatsisf+0x1c>
 6f0:	fa f4       	brpl	.+62     	; 0x730 <__floatsisf+0x6c>
 6f2:	bb 0f       	add	r27, r27
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__floatsisf+0x36>
 6f6:	60 ff       	sbrs	r22, 0
 6f8:	1b c0       	rjmp	.+54     	; 0x730 <__floatsisf+0x6c>
 6fa:	6f 5f       	subi	r22, 0xFF	; 255
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	16 c0       	rjmp	.+44     	; 0x730 <__floatsisf+0x6c>
 704:	88 23       	and	r24, r24
 706:	11 f0       	breq	.+4      	; 0x70c <__floatsisf+0x48>
 708:	96 e9       	ldi	r25, 0x96	; 150
 70a:	11 c0       	rjmp	.+34     	; 0x72e <__floatsisf+0x6a>
 70c:	77 23       	and	r23, r23
 70e:	21 f0       	breq	.+8      	; 0x718 <__floatsisf+0x54>
 710:	9e e8       	ldi	r25, 0x8E	; 142
 712:	87 2f       	mov	r24, r23
 714:	76 2f       	mov	r23, r22
 716:	05 c0       	rjmp	.+10     	; 0x722 <__floatsisf+0x5e>
 718:	66 23       	and	r22, r22
 71a:	71 f0       	breq	.+28     	; 0x738 <__floatsisf+0x74>
 71c:	96 e8       	ldi	r25, 0x86	; 134
 71e:	86 2f       	mov	r24, r22
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	2a f0       	brmi	.+10     	; 0x730 <__floatsisf+0x6c>
 726:	9a 95       	dec	r25
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	da f7       	brpl	.-10     	; 0x726 <__floatsisf+0x62>
 730:	88 0f       	add	r24, r24
 732:	96 95       	lsr	r25
 734:	87 95       	ror	r24
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret

0000073a <__fp_inf>:
 73a:	97 f9       	bld	r25, 7
 73c:	9f 67       	ori	r25, 0x7F	; 127
 73e:	80 e8       	ldi	r24, 0x80	; 128
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	08 95       	ret

00000746 <__fp_nan>:
 746:	9f ef       	ldi	r25, 0xFF	; 255
 748:	80 ec       	ldi	r24, 0xC0	; 192
 74a:	08 95       	ret

0000074c <__fp_pscA>:
 74c:	00 24       	eor	r0, r0
 74e:	0a 94       	dec	r0
 750:	16 16       	cp	r1, r22
 752:	17 06       	cpc	r1, r23
 754:	18 06       	cpc	r1, r24
 756:	09 06       	cpc	r0, r25
 758:	08 95       	ret

0000075a <__fp_pscB>:
 75a:	00 24       	eor	r0, r0
 75c:	0a 94       	dec	r0
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	14 06       	cpc	r1, r20
 764:	05 06       	cpc	r0, r21
 766:	08 95       	ret

00000768 <__fp_round>:
 768:	09 2e       	mov	r0, r25
 76a:	03 94       	inc	r0
 76c:	00 0c       	add	r0, r0
 76e:	11 f4       	brne	.+4      	; 0x774 <__fp_round+0xc>
 770:	88 23       	and	r24, r24
 772:	52 f0       	brmi	.+20     	; 0x788 <__fp_round+0x20>
 774:	bb 0f       	add	r27, r27
 776:	40 f4       	brcc	.+16     	; 0x788 <__fp_round+0x20>
 778:	bf 2b       	or	r27, r31
 77a:	11 f4       	brne	.+4      	; 0x780 <__fp_round+0x18>
 77c:	60 ff       	sbrs	r22, 0
 77e:	04 c0       	rjmp	.+8      	; 0x788 <__fp_round+0x20>
 780:	6f 5f       	subi	r22, 0xFF	; 255
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	08 95       	ret

0000078a <__fp_split3>:
 78a:	57 fd       	sbrc	r21, 7
 78c:	90 58       	subi	r25, 0x80	; 128
 78e:	44 0f       	add	r20, r20
 790:	55 1f       	adc	r21, r21
 792:	59 f0       	breq	.+22     	; 0x7aa <__fp_splitA+0x10>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	71 f0       	breq	.+28     	; 0x7b4 <__fp_splitA+0x1a>
 798:	47 95       	ror	r20

0000079a <__fp_splitA>:
 79a:	88 0f       	add	r24, r24
 79c:	97 fb       	bst	r25, 7
 79e:	99 1f       	adc	r25, r25
 7a0:	61 f0       	breq	.+24     	; 0x7ba <__fp_splitA+0x20>
 7a2:	9f 3f       	cpi	r25, 0xFF	; 255
 7a4:	79 f0       	breq	.+30     	; 0x7c4 <__fp_splitA+0x2a>
 7a6:	87 95       	ror	r24
 7a8:	08 95       	ret
 7aa:	12 16       	cp	r1, r18
 7ac:	13 06       	cpc	r1, r19
 7ae:	14 06       	cpc	r1, r20
 7b0:	55 1f       	adc	r21, r21
 7b2:	f2 cf       	rjmp	.-28     	; 0x798 <__fp_split3+0xe>
 7b4:	46 95       	lsr	r20
 7b6:	f1 df       	rcall	.-30     	; 0x79a <__fp_splitA>
 7b8:	08 c0       	rjmp	.+16     	; 0x7ca <__fp_splitA+0x30>
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	18 06       	cpc	r1, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	f1 cf       	rjmp	.-30     	; 0x7a6 <__fp_splitA+0xc>
 7c4:	86 95       	lsr	r24
 7c6:	71 05       	cpc	r23, r1
 7c8:	61 05       	cpc	r22, r1
 7ca:	08 94       	sec
 7cc:	08 95       	ret

000007ce <__fp_zero>:
 7ce:	e8 94       	clt

000007d0 <__fp_szero>:
 7d0:	bb 27       	eor	r27, r27
 7d2:	66 27       	eor	r22, r22
 7d4:	77 27       	eor	r23, r23
 7d6:	cb 01       	movw	r24, r22
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret

000007dc <__mulsf3>:
 7dc:	0b d0       	rcall	.+22     	; 0x7f4 <__mulsf3x>
 7de:	c4 cf       	rjmp	.-120    	; 0x768 <__fp_round>
 7e0:	b5 df       	rcall	.-150    	; 0x74c <__fp_pscA>
 7e2:	28 f0       	brcs	.+10     	; 0x7ee <__mulsf3+0x12>
 7e4:	ba df       	rcall	.-140    	; 0x75a <__fp_pscB>
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <__mulsf3+0x12>
 7e8:	95 23       	and	r25, r21
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__mulsf3+0x12>
 7ec:	a6 cf       	rjmp	.-180    	; 0x73a <__fp_inf>
 7ee:	ab cf       	rjmp	.-170    	; 0x746 <__fp_nan>
 7f0:	11 24       	eor	r1, r1
 7f2:	ee cf       	rjmp	.-36     	; 0x7d0 <__fp_szero>

000007f4 <__mulsf3x>:
 7f4:	ca df       	rcall	.-108    	; 0x78a <__fp_split3>
 7f6:	a0 f3       	brcs	.-24     	; 0x7e0 <__mulsf3+0x4>

000007f8 <__mulsf3_pse>:
 7f8:	95 9f       	mul	r25, r21
 7fa:	d1 f3       	breq	.-12     	; 0x7f0 <__mulsf3+0x14>
 7fc:	95 0f       	add	r25, r21
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	55 1f       	adc	r21, r21
 802:	62 9f       	mul	r22, r18
 804:	f0 01       	movw	r30, r0
 806:	72 9f       	mul	r23, r18
 808:	bb 27       	eor	r27, r27
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	63 9f       	mul	r22, r19
 810:	aa 27       	eor	r26, r26
 812:	f0 0d       	add	r31, r0
 814:	b1 1d       	adc	r27, r1
 816:	aa 1f       	adc	r26, r26
 818:	64 9f       	mul	r22, r20
 81a:	66 27       	eor	r22, r22
 81c:	b0 0d       	add	r27, r0
 81e:	a1 1d       	adc	r26, r1
 820:	66 1f       	adc	r22, r22
 822:	82 9f       	mul	r24, r18
 824:	22 27       	eor	r18, r18
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	73 9f       	mul	r23, r19
 82e:	b0 0d       	add	r27, r0
 830:	a1 1d       	adc	r26, r1
 832:	62 1f       	adc	r22, r18
 834:	83 9f       	mul	r24, r19
 836:	a0 0d       	add	r26, r0
 838:	61 1d       	adc	r22, r1
 83a:	22 1f       	adc	r18, r18
 83c:	74 9f       	mul	r23, r20
 83e:	33 27       	eor	r19, r19
 840:	a0 0d       	add	r26, r0
 842:	61 1d       	adc	r22, r1
 844:	23 1f       	adc	r18, r19
 846:	84 9f       	mul	r24, r20
 848:	60 0d       	add	r22, r0
 84a:	21 1d       	adc	r18, r1
 84c:	82 2f       	mov	r24, r18
 84e:	76 2f       	mov	r23, r22
 850:	6a 2f       	mov	r22, r26
 852:	11 24       	eor	r1, r1
 854:	9f 57       	subi	r25, 0x7F	; 127
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	8a f0       	brmi	.+34     	; 0x87c <__mulsf3_pse+0x84>
 85a:	e1 f0       	breq	.+56     	; 0x894 <__mulsf3_pse+0x9c>
 85c:	88 23       	and	r24, r24
 85e:	4a f0       	brmi	.+18     	; 0x872 <__mulsf3_pse+0x7a>
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	bb 1f       	adc	r27, r27
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	91 50       	subi	r25, 0x01	; 1
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	a9 f7       	brne	.-22     	; 0x85c <__mulsf3_pse+0x64>
 872:	9e 3f       	cpi	r25, 0xFE	; 254
 874:	51 05       	cpc	r21, r1
 876:	70 f0       	brcs	.+28     	; 0x894 <__mulsf3_pse+0x9c>
 878:	60 cf       	rjmp	.-320    	; 0x73a <__fp_inf>
 87a:	aa cf       	rjmp	.-172    	; 0x7d0 <__fp_szero>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	ec f3       	brlt	.-6      	; 0x87a <__mulsf3_pse+0x82>
 880:	98 3e       	cpi	r25, 0xE8	; 232
 882:	dc f3       	brlt	.-10     	; 0x87a <__mulsf3_pse+0x82>
 884:	86 95       	lsr	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	b7 95       	ror	r27
 88c:	f7 95       	ror	r31
 88e:	e7 95       	ror	r30
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c1 f7       	brne	.-16     	; 0x884 <__mulsf3_pse+0x8c>
 894:	fe 2b       	or	r31, r30
 896:	88 0f       	add	r24, r24
 898:	91 1d       	adc	r25, r1
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
